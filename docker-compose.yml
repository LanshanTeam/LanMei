version: "3.8"

services:
  app:
    build: .
    container_name: app
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - lanmei-network

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3306:3306"
    volumes:
      - ./data/mysql/data:/var/lib/mysql:rw
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - lanmei-network

  redis:
    image: redis:8.0.3
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis_data:/data:rw
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - lanmei-network
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: unless-stopped
    # Qdrant 默认就是把数据落在 /qdrant/storage 下，这里显式映射到本地磁盘
    volumes:
      - ./data/qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"   # HTTP API
      - "6334:6334"   # gRPC
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_KEY}
      # ==== 关键：磁盘优先，减少内存占用 ====
      # 将 Payload（元数据）放磁盘，适合 2GB 内存机器
      - QDRANT__STORAGE__ON_DISK_PAYLOAD=true
      # 崩溃后尝试恢复
      - QDRANT__STORAGE__ATTEMPT_RECOVERY=true
      # 降低内存峰值（压缩 WAL 等），小机器更稳
      - QDRANT__WAL__WAL_CAPACITY_MB=64
      - QDRANT__WAL__WAL_SEGMENT_SIZE_MB=16
      # 适度减少并行度，避免吃满内存
      - QDRANT__SERVICE__GRPC_TIMEOUT_SEC=30
    # === 可选：给容器设定内存上限，防止同机其他服务被挤爆 ===
    networks:
      - lanmei-network
    deploy:
      resources:
        limits:
          memory: 256M   # 1GB 给 Qdrant

networks:
  lanmei-network:
    driver: bridge
